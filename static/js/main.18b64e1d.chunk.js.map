{"version":3,"sources":["Constants.js","components/todo/AuthenticationService.js","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","api/todo/TodoDataService.js","components/todo/ListTodosComponent.jsx","components/todo/WelcomeComponent.jsx","api/todo/HelloWorldService.js","components/todo/HeaderComponent.jsx","components/todo/FooterComponent.jsx","components/todo/LogoutComponent.jsx","components/todo/TodoComponent.jsx","components/todo/ErrorComponent.jsx","serviceWorkerDev.js","components/todo/ForgotPasswordComponent.jsx","components/todo/TodoApp.jsx","App.js","index.js"],"names":["API_URL","username","password","axios","get","headers","authorization","this","createBasicAuthToken","post","window","btoa","token","sessionStorage","setItem","setupAxiosInterceptors","removeItem","getItem","interceptors","request","use","config","isUserLoggedIn","navigator","onLine","console","log","indexedDB","open","onerror","event","error","target","errorCode","bind","onupgradeneeded","result","createObjectStore","keyPath","autoIncrement","transaction","oncomplete","alert","AuthenticatedRoute","AuthenticationService","props","to","Component","LoginComponent","state","hasLoginFailed","showSuccessMessage","handleChange","loginClicked","forgotPasswordClicked","value","setState","name","checkInternet","history","push","registerSuccessfullLogin","className","type","id","onChange","onClick","delete","todo","put","ListTodosComponent","todos","message","todos1","deleteTodoClicked","updateTodoClicked","addTodoClicked","fetchIndexDBList","change","obj","getLoggedInUserName","TodoDataService","retrieveAllTodos","then","response","data","myResult","onsuccess","getRequest","objectStore","getAll","confirm","db","map","key","USER_ID","description","moment","targetDate","format","WelcomeComponent","welcomeMessage","retrieveWelcomeMessage","handleSuccessfulResponse","handleError","match","params","errorMessage","HeaderComponent","href","src","alt","logout","withRouter","FooterComponent","LogoutComponent","TodoComponent","Date","onSubmit","goBack","getIndexedDBDataById","values","add","createIndex","unique","customerObjectStore","updatedTodo","parseInt","requestUpdate","errors","length","isValid","initialValues","validateOnChange","validateOnBlur","validate","enableReinitialize","component","ErrorComponent","newWorker","ForgotPasswordComponent","emailId","submitClicked","cancelClicked","TodoApp","path","exact","App","ReactDOM","render","document","getElementById","serviceWorker","register","reg","addEventListener","installing","controller","getRegistrations","registrations","registration","update","location","reload","catch","err"],"mappings":"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","file":"static/js/main.18b64e1d.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:8081'","import axios from 'axios'\nimport {API_URL} from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticateUser'\nexport const PASSWORD_SESSION_ATTRIBUTE_NAME = 'authenticatePassword'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            {\n                headers: {\n                    authorization: this.createBasicAuthToken(username, password)\n                }\n            }\n        );\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`,\n            {\n                username, password\n            }\n        );\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    registerSuccessfullLogin(username, password) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n        sessionStorage.setItem(PASSWORD_SESSION_ATTRIBUTE_NAME, password);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        sessionStorage.removeItem(PASSWORD_SESSION_ATTRIBUTE_NAME);\n    }\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        if (user == null) return false;\n        return true;\n    }\n    getLoggedInUserName() {\n        let username = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        if (username == null) return '';\n        return username;;\n    }\n\n    // setupAxiosInterceptors(basicAuthHeader) {\n    //     axios.interceptors.request.use(\n    //         (config) => {\n    //             if (this.isUserLoggedIn()) {\n    //                 config.headers.authorization = basicAuthHeader\n    //             }\n    //             return config\n    //         }\n    //     )\n    // }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n    checkInternet() {\n        const condition = navigator.onLine ? 'online' : 'offline';\n        if (condition === 'online')\n            return true;\n        return false;\n    }\n\n    // CreateObjectStore(storeName) {\n    //     var request = indexedDB.open('');\n    //     request.onsuccess = function (e){\n    //         var database = e.target.result;\n    //         var version =  parseInt(database.version);\n    //         database.close();\n    //         var secondRequest = indexedDB.open(dbName, version+1);\n    //         secondRequest.onupgradeneeded = function (e) {\n    //             var database = e.target.result;\n    //             var objectStore = database.createObjectStore(storeName, {\n    //                 keyPath: 'id'\n    //             });\n    //         };\n    //         secondRequest.onsuccess = function (e) {\n    //             e.target.result.close();\n    //         }\n    //     }\n    // }\n    createObjectStore(){\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n            console.log(\"Going to create object store\");\n            var request = indexedDB.open(\"todo-app\", 5);\n            console.log(\"Starting---\");\n            request.onerror = function (event) {\n                console.error(\"Database error: \" + event.target.errorCode);\n                console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n            }.bind(this);\n            request.onupgradeneeded = function (event) {\n                // Save the IDBDatabase interface \n                console.log(\"Call on upgrade needed\");\n                var db = event.target.result;\n\n                // Create an objectStore for this database\n                var objectStore = db.createObjectStore(\"todo\", { keyPath: 'USER_ID', autoIncrement: true });\n                objectStore.transaction.oncomplete = function (event) {\n                    // var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n\n                    // Store values in the newly created objectStore.\n                    console.log(\"table creation completed---\");   \n\n                };\n            }.bind(this);\n        }\n    }\n    \n\n}\n\nexport default new AuthenticationService()","import React,{Component} from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport {Route,Redirect} from \"react-router-dom\"\nclass AuthenticatedRoute extends Component{\nrender(){\n    if(AuthenticationService.isUserLoggedIn()){\n     return   <Route {...this.props} />\n    }else{\n        return <Redirect to=\"/login\"/>\n\n    }\n}\n}\nexport default AuthenticatedRoute","import React,{Component} from \"react\"\nimport AuthenticationService from './AuthenticationService.js'\n// import TodoDataService from '../../api/todo/TodoDataService.js'\n// import DB from './db.js'\n\nclass LoginComponent extends Component {\n  // let db;\n    constructor(props){\n        super(props)\n        this.state={\n            username : 'anchal',\n            password : '',\n            hasLoginFailed : false,\n            showSuccessMessage : false\n        }\n        // this.handleUsernameChange = this.handleUsernameChange.bind(this)\n        // this.handlePasswordChange = this.handlePasswordChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n        this.forgotPasswordClicked = this.forgotPasswordClicked.bind(this)\n        // this.addRecipe =this.addRecipe.bind(this)\n    }\n    handleChange(event){\n        console.log(event.target.value);\n        this.setState({\n            [event.target.name]:event.target.value\n        })\n    }\n    forgotPasswordClicked() {\n        let condition = AuthenticationService.checkInternet();\n        if (condition) {\n            console.log(\"online---\");\n            this.props.history.push('/forgotPassword')\n        } else {\n            alert(\"You are offline.\");\n        }\n    }\n    // handleUsernameChange(event){\n    // console.log(event.target.value);\n    // this.setState({\n    //     username:event.target.value\n    // })\n    // }\n    // handlePasswordChange(event){\n    //     console.log(event.target.value);\n    //     this.setState({\n    //         password:event.target.value\n    //     })\n    //     }\n    loginClicked(){\n        var db;\n        // function dbIntialition() {\nif (!('indexedDB' in window)) {\n    // console.log('This browser does not support IndexedDB');\n  } else {\n    // console.log('In function');\n    // var openRequest = indexedDB.open('test_db', 1);\n    // // console.log(\"OpenRequset\", openRequest);\n    // openRequest.onupgradeneeded = function (e) {\n    //   // console.log('In Open Request');\n    //   var db = e.target.result;\n    //   // console.log('running onupgradeneeded');\n    //   if (!db.objectStoreNames.contains('user')) {\n    //     var storeOS = db.createObjectStore('user', { keyPath: 'id', autoIncrement: true });\n    //     storeOS.createIndex(\"username\", \"username\", { unique: true });\n    //   }\n    // };\n    // openRequest.onsuccess = function (e) {\n    //   console.log('inside open request');\n    //   db = e.target.result;\n    //   console.log(\"Db in success\", db);\n    //   var transaction = db.transaction(['user'], 'readwrite');\n    //   var recipe = transaction.objectStore('user');\n    //   var item = {\n    //     username: document.getElementById(\"username\").value,\n    //     password : document.getElementById(\"password\").value,\n    //     // username : username,\n    //     // password : password,\n    //     created: new Date().getTime()\n    //   };\n    //   console.log(item);\n    //   var request = recipe.add(item);\n    \n    //   request.onerror = function (e) {\n    //     console.log(\"In error\");\n    //     alert(\"Duplicate username\");\n    //     // console.log('Error', e.target.error.name);\n    //   };\n    //   request.onsuccess = function (e) {\n        \n    //   //   getListOfRecipe();\n    //   //   document.getElementById(\"name\").value = \"\";\n    //   //   document.getElementById(\"emailId\").value = \"\";\n    //     // document.getElementById(\"task\").value = \"\";\n    //     // location.reload();\n    //     // console.log('Woot! Did it');\n    //   };\n    // };\n    // openRequest.onerror = function (e) {\n  \n    //   console.log('onerror!');\n    //   // console.dir(e);\n    // };\n    // console.log(\"After open request\")\n  }\n  if(this.state.username != null && this.state.username != '' && this.state.password != null && this.state.password != ''){\n    AuthenticationService.registerSuccessfullLogin(this.state.username,this.state.password);\n    this.props.history.push(`/welcome/${this.state.username}`)\n  }else{\n      alert(\"Please enter username & password\")\n  }\n  \n\n// AuthenticationService.executeJwtAuthenticationService(this.state.username,this.state.password)\n// .then(\n// () => {\n//     AuthenticationService.registerSuccessfullLogin(this.state.username,this.state.password);\n//     this.props.history.push(`/welcome/${this.state.username}`)\n// }\n// ).catch(\n// () => {\n//     this.setState({showSuccessMessage:false})\n//     this.setState({hasLoginFailed:true}) \n// }\n// )\n    }\n    \nrender(){\n        return(\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                {/* <ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/> */}\n                {/* {this.state.showSuccessMessage && <div>Login successful</div>} */}\n                {/* <ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/> */}\n                {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Login failed</div>}\n                <br/>Username : <input type=\"text\" name=\"username\" id=\"username\" value={this.state.username} onChange={this.handleChange}/><br/><br/>\n                Password : <input type=\"password\" name=\"password\" id=\"password\" value={this.state.password} onChange={this.handleChange} /><br/><br/>\n                <button className=\"btn btn-success myBtn\" onClick={this.loginClicked}>Login</button><br/>\n                <br/><br/><button className=\"btn btn-success myBtn\" onClick={this.forgotPasswordClicked}>Forgot Password</button><br/>\n                Ver. 1.009\n                </div>\n            </div>\n        )\n    }\n}\n// function addRecipe() {\n//   // var db = dbIntialition();\n//   addItem();\n// }\n\n// function addItem() {\n//   // var db = dbIntialition();\n//   var transaction = db.transaction(['user'], 'readwrite');\n//   var recipe = transaction.objectStore('user');\n//   var item = {\n//   //   name: document.getElementById(\"name\").value,\n//   //   emailId: document.getElementById(\"emailId\").value,\n//     name: \"Anchal\",\n//     emailId: \"anchal.c@altius.cc\",\n//     task: \"\",\n//     created: new Date().getTime()\n//   };\n//   console.log(item);\n//   var request = recipe.add(item);\n\n//   request.onerror = function (e) {\n//     console.log(\"In error\");\n//     alert(\"Duplicate email Id\");\n//     // console.log('Error', e.target.error.name);\n//   };\n//   request.onsuccess = function (e) {\n//   //   getListOfRecipe();\n//   //   document.getElementById(\"name\").value = \"\";\n//   //   document.getElementById(\"emailId\").value = \"\";\n//     // document.getElementById(\"task\").value = \"\";\n//     // location.reload();\n//     // console.log('Woot! Did it');\n//   };\n// }\n// function ShowInvalidCredentials(props){\n//     if(props.hasLoginFailed){\n//         console.log(\"login failed\");\n//         return <div>Login failed</div>\n//     }\n//     return null;\n// }\n\n// function ShowLoginSuccessMessage(props){\n//     if(props.showSuccessMessage){\n//         console.log(\"login success\");\n//         return <div>Login successful</div>\n//     }\n//     return null;\n// }\nexport default LoginComponent","import axios from 'axios'\nimport {API_URL} from '../../Constants'\n\nclass TodoDataService {\n    retrieveAllTodos(username){\n        console.log(\"executed service 3\");\n        return axios.get(`${API_URL}/users/${username}/todos`);\n    }\n    retrieveTodo(username,id){\n        console.log(\"executed service 4\");\n        return axios.get(`${API_URL}/users/${username}/todos/${id}`);\n    }\n    deleteTodo(username,id){\n        console.log(\"executed service 5\");\n        return axios.delete(`${API_URL}/users/${username}/todos/${id}`);\n    }\n    updateTodo(username,id,todo){\n        console.log(\"executed service 6\");\n        return axios.put(`${API_URL}/users/${username}/todos/${id}`,todo);\n    }\n    createTodo(username,todo){\n        console.log(\"executed service 7\");\n        return axios.post(`${API_URL}/users/${username}/todos/`,todo);\n    }\n    login(username,password){\n        console.log(\"executed service 8\");\n        return axios.get(`http://localhost:8081/users/${username}/${password}/`);\n    }\n}\n\nexport default new TodoDataService()","import React, { Component } from \"react\"\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\n\n\nclass ListTodosComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            todos: [],\n            message: null,\n            todos1: []\n        }\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this);\n        this.updateTodoClicked = this.updateTodoClicked.bind(this);\n        this.addTodoClicked = this.addTodoClicked.bind(this);\n        this.fetchIndexDBList = this.fetchIndexDBList.bind(this);\n        this.change = this.change.bind(this);\n\n    }\n    change(obj) {\n        this.setState({ obj });\n    }\n\n    componentDidMount() {\n\n        this.fetchIndexDBList();\n        // if (AuthenticationService.checkInternet()) {\n        //     this.refreshTodos();\n        // } else {\n        //     alert(\"You are offline\");\n        // }\n        \n    }\n    refreshTodos() {\n        let username = AuthenticationService.getLoggedInUserName();\n        TodoDataService.retrieveAllTodos(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({ todos: response.data })\n                }\n            );\n    }\n    updateTodoClicked(id) {\n        console.log(\"inside todo clicked\");\n        // let username = AuthenticationService.getLoggedInUserName();\n        this.props.history.push(`/todos/${id}`)\n        // TodoDataService.deleteTodo(username,id)\n        // .then(\n        //     response => {\n        //    this.setState({message : `Delete of todo ${id} successful`});\n        //    this.refreshTodos()\n        //     }\n        // );\n    }\n    fetchIndexDBList() {\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n            var db;\n            var myResult = [];\n            var request = indexedDB.open(\"todo-app\", 5);\n            request.onerror = function (event) {\n                console.error(\"Database error: \" + event.target.errorCode);\n                console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n            }.bind(this);\n\n            var arr = [];\n            // console.log(\"---1---\");\n            request.onsuccess = function (event) {\n                // console.log(\"---2---\");\n                db = event.target.result;\n                var customerObjectStore = db.transaction(\"todo\").objectStore(\"todo\");\n                // console.log(\"---3---\");\n                var getRequest = customerObjectStore.getAll();\n                // console.log(\"---4---\");\n                getRequest.onsuccess = function (event) {\n                    // console.log(\"---5---\");\n                    myResult = getRequest.result;\n                    // console.log(\"1st result---\"+myResult)\n                    // this.change({ todos1: myResult })   \n                    this.setState({ todos1: myResult });\n                    // document.getElementById('todoList').innerHTML = \"\";\n\n                }.bind(this);\n                getRequest.onerror = function (event) {\n                    console.error(\"Database error: \" + event.target.errorCode);\n                    console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n                }.bind(this);\n                // console.log(\"---5---\");\n            }.bind(this);\n            // console.log(\"2nd result---\"+myResult);\n            // this.setState({todos1:myResult});\n            // console.log(\"last result---\"+myResult)\n        }\n    }\n\n    deleteTodoClicked(id) {\n        console.log(\"delete todo clicked---\" + id);\n        if(window.confirm(\"Are you sure you want to delete?\")){\n        // Start index db code\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n\n            var db;\n            var request = indexedDB.open(\"todo-app\", 5);\n\n            request.onerror = function (event) {\n                console.error(\"Database error: \" + event.target.errorCode);\n                console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n            }.bind(this);\n\n            request.onsuccess = function (event) {\n                db = event.target.result;\n                // var transaction = db.transaction([\"todo\"]);\n                var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\")\n                    .delete(id);\n                customerObjectStore.onsuccess = function (event) {\n                    var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n                    var getRequest = customerObjectStore.getAll();\n                    // console.log(\"---4---\");\n                    getRequest.onsuccess = function (event) {\n                        // console.log(\"---5---\");\n                        // myResult = getRequest.result;\n                        // console.log(\"1st result---\"+myResult)\n                        // this.change({ todos1: myResult })   \n                        this.setState({ todos1: getRequest.result });\n                        // document.getElementById('todoList').innerHTML = \"\";\n\n                    }.bind(this);\n                }.bind(this);\n\n            }.bind(this);\n            // This event is only implemented in recent browsers   \n\n            request.onupgradeneeded = function (event) {\n                // Save the IDBDatabase interface \n                var db = event.target.result;\n\n                // Create an objectStore for this database\n                var objectStore = db.createObjectStore(\"todo\", { keyPath: 'USER_ID', autoIncrement: true });\n                objectStore.transaction.oncomplete = function (event) {\n                    // var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n\n                    // Store values in the newly created objectStore.\n\n                };\n            };\n\n\n        }\n        // End index db code\n\n\n\n        let username = AuthenticationService.getLoggedInUserName();\n        // if (AuthenticationService.checkInternet()) {\n        //     TodoDataService.deleteTodo(username, id)\n        //         .then(\n        //             response => {\n        //                 this.setState({ message: `Delete of todo ${id} successful` });\n        //                 this.refreshTodos()\n        //             }\n        //         );\n        // } else {\n        //     alert(\"You are offline\");\n        // }\n    }\n    }\n\n    addTodoClicked(id) {\n        this.props.history.push(`/todos/-1`)\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <h1>List todos</h1>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n\n                <div className=\"container\">\n                    {/* <table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Description</th>\n                                <th>Done</th>\n                                <th>Target Date</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.todos.map(\n                                    todo =>\n                                        <tr key={todo.id}>\n                                            <td>{todo.id}</td>\n                                            <td>{todo.description}</td>\n                                            <td>{todo.isDone.toString()}</td>\n                                            <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(todo.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(todo.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table> */}\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add Todo</button>\n                    </div>\n                </div>\n\n                <div className=\"container\">\n                    {/* Indexed DB List: */}\n<table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Description</th>\n                                {/* <th>Done</th> */}\n                                <th>Target Date</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"todoList\">\n                            {\n                                this.state.todos1.map(\n                                    todo =>\n                                        <tr key={todo.USER_ID}>\n                                            <td>{todo.USER_ID}</td>\n                                            <td>{todo.description}</td>\n                                            {/* <td>Not done</td> */}\n                                            <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(todo.USER_ID)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(todo.USER_ID)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\nexport default ListTodosComponent","import React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\nimport AuthenticationService from \"./AuthenticationService.js\"\n\nclass WelcomeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            welcomeMessage: ''\n        }\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!</h1>\n                <div className=\"container\">\n                    Welcome {this.props.match.params.name}.You can manage your todos <Link to=\"/todos\">here</Link>\n                </div>\n                {/* <div className=\"container\">\n                    Click here to get customized welcome message <br />\n                    <button onClick={this.retrieveWelcomeMessage} className=\"btn btn-success\">Connect to server</button>\n                </div> */}\n                <div className=\"container\">\n                    {this.state.welcomeMessage}\n                </div>\n            </>\n        )\n    }\n    retrieveWelcomeMessage() {\n        // HelloWorldService.executeHelloWorldService()\n        // .then(response => this.handleSuccessfulResponse(response))\n        // .catch()\n\n        // HelloWorldService.executeHelloWorldBeanService()\n        // .then(response => this.handleSuccessfulResponse(response))\n        // .catch()\n        // if (AuthenticationService.checkInternet()) {\n        //     HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n        //         .then(response => this.handleSuccessfulResponse(response))\n        //         .catch(error => this.handleError(error));\n        // } else {\n        //     alert(\"You are offline\");\n        // }\n    }\n    handleSuccessfulResponse(response) {\n        this.setState({ welcomeMessage: response.data.message })\n    }\n    handleError(error) {\n        console.log(\"----------->\" + error.response);\n        let errorMessage = '';\n        if (error.message)\n            errorMessage += error.message\n\n        if (error.response && error.response.data) {\n            errorMessage += error.response.data.message\n        }\n\n\n        this.setState({ welcomeMessage: errorMessage })\n    }\n}\nexport default WelcomeComponent","import axios from 'axios'\n\nclass HelloWorldService {\nexecuteHelloWorldService(){\n    console.log(\"executed service 1\");\n    return axios.get('http://localhost:8081/hello-world');\n}\nexecuteHelloWorldBeanService(){\n    console.log(\"executed service 2\");\n    return axios.get('http://localhost:8081/hello-world-bean');\n}\nexecuteHelloWorldPathVariableService(name){\n    \n    console.log(\"executed service 3\");\n    return axios.get(`http://localhost:8081/hello-world/path-variable/${name}`);\n}\n}\n\nexport default new HelloWorldService()","import React,{Component} from \"react\"\nimport AuthenticationService from './AuthenticationService.js'\nimport {Link} from \"react-router-dom\"\nimport { withRouter } from 'react-router';\n\nclass HeaderComponent extends Component {\n    render(){\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        return(\n<header>\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n            <div><a href=\"http://www.altius.cc\" className=\"navbar-brand\"><img src=\"logo.png\" alt=\"...\"></img></a></div>\n            <ul className=\"navbar-nav\">\n                {isUserLoggedIn && <li ><Link className=\"nav-link\" to=\"/welcome/anchal\">Home</Link></li>}\n                {isUserLoggedIn && <li ><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\n            </ul>\n         <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n            {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n            {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n          </ul>\n          </nav>\n          </header>\n        )\n    }\n}\nexport default withRouter(HeaderComponent)","import React,{Component} from \"react\"\n\nclass FooterComponent extends Component {\n    render(){\n        return(\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All rights reserved 2019 @altius</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React,{Component} from \"react\"\n\nclass LogoutComponent extends Component {\n    render(){\n        return(\n            <>\n            <h1>You are logged out. </h1>\n            <div className=\"container\">\n                Thank you for using our application\n            </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass TodoComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: this.props.match.params.id,\n            USER_ID: this.props.match.params.id,\n            description: '',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.goBack = this.goBack.bind(this)\n        this.getIndexedDBDataById = this.getIndexedDBDataById.bind(this)\n    }\n    goBack() {\n        this.props.history.push('/todos')\n    }\n    onSubmit(values) {\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n        console.log(values);\n        let username = AuthenticationService.getLoggedInUserName();\n        console.log(\"on submit called\");\n        console.log(\"id---*******\" + this.state.id)\n\n        if (this.state.id === \"-1\") {\n            console.log(\"outside if\");\n            if (!('indexedDB' in window)) {\n                alert('This browser does not support IndexedDB');\n            } else {\n\n                var db;\n                var request = indexedDB.open(\"todo-app\", 5);\n                request.onerror = function (event) {\n                    console.error(\"Database error: \" + event.target.errorCode);\n                    console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n                };\n                const customerData = [\n                    { ssn: \"444-44-4444\", name: \"Bill\", age: 35, email: \"bill@company.com\" },\n                    { ssn: \"555-55-5555\", name: \"Donna\", age: 32, email: \"donna@home.org\" }\n                ];\n\n                //   var item = {\n                //     username: document.getElementById(\"username\").value,\n                //     password : document.getElementById(\"password\").value,\n                //     // username : username,\n                //     // password : password,\n                //     created: new Date().getTime()\n                //   };\n\n                request.onsuccess = function (event) {\n                    db = event.target.result;\n                    var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n                    // customerData.forEach(function(customer) {\n                    customerObjectStore.add(todo);\n                    // });\n                };\n                //   transaction.oncomplete = function(event) {\n                //     console.log(\"All done!\");\n                //   };\n\n                // This event is only implemented in recent browsers   \n\n                request.onupgradeneeded = function (event) {\n                    // Save the IDBDatabase interface \n                    var db = event.target.result;\n\n                    // Create an objectStore for this database\n                    var objectStore = db.createObjectStore(\"todo\", { keyPath: 'USER_ID', autoIncrement: true });\n                    objectStore.createIndex(\"USER_ID\", \"USER_ID\", { unique: true });\n                    // objectStore.createIndex(\"id\", \"id\", { unique: true });\n                    objectStore.transaction.oncomplete = function (event) {\n                        var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n                        // customerData.forEach(function(customer) {\n                        customerObjectStore.add(todo);\n                        // });\n                        // Store values in the newly created objectStore.\n\n                    };\n                };\n\n\n            }\n\n            this.props.history.push('/todos');\n            console.log(\"call api\");\n            // if (AuthenticationService.checkInternet()) {\n            //     TodoDataService.createTodo(username, todo).then(\n            //         () => this.props.history.push('/todos')\n            //     )\n            // } else {\n            //     alert(\"You are offline. You can not add new todo\");\n            // }\n        } else {\n            console.log(\"inside else update\");\n            if (!('indexedDB' in window)) {\n                alert('This browser does not support IndexedDB');\n            } else {\n                var db;\n                var request = indexedDB.open(\"todo-app\", 5);\n                request.onerror = function (event) {\n                    console.error(\"Database error: \" + event.target.errorCode);\n                    console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n                };\n\n\n                //   var item = {\n                //     username: document.getElementById(\"username\").value,\n                //     password : document.getElementById(\"password\").value,\n                //     // username : username,\n                //     // password : password,\n                //     created: new Date().getTime()\n                //   };\n\n                request.onsuccess = function (event) {\n                    db = event.target.result;\n                    var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n                    var request = customerObjectStore.get(this.state.id);\n                    console.log(\"id in update---\" + this.state.id);\n\n\n                    console.log(\"request user id----\" + request)\n                    request.onerror = function (event) {\n                        console.error(\"Database error: \" + event.target.errorCode);\n                        console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n                    }.bind(this);\n                    request.onsuccess = function (event) {\n                        var data = event.target.result;\n                        // console.log(\"user id 1---\"+values.USER_ID);\n                        // console.log(\"user id 2---\"+this.state.id);\n                        // console.log(\"data description---\"+values.description);\n                        // data.description = values.description;\n                        // console.log(\"request id----\"+request.result.description)\n                        let updatedTodo = {\n                            id: -1,\n                            USER_ID: parseInt(values.USER_ID),\n                            description: values.description,\n                            targetDate: values.targetDate\n                        }\n                        var requestUpdate = customerObjectStore.put(updatedTodo);\n                        requestUpdate.onerror = function (event) {\n                            // Do something with the error\n                        }.bind(this);\n                        requestUpdate.onsuccess = function (event) {\n                            // Success - the data is updated!\n                        }.bind(this);\n                    }.bind(this);\n                    // });\n                }.bind(this);\n                //   transaction.oncomplete = function(event) {\n                //     console.log(\"All done!\");\n                //   };\n\n                // This event is only implemented in recent browsers   \n\n                request.onupgradeneeded = function (event) {\n                    // Save the IDBDatabase interface \n                    var db = event.target.result;\n\n                    // Create an objectStore for this database\n                    var objectStore = db.createObjectStore(\"todo\", { keyPath: 'USER_ID', autoIncrement: true });\n                    objectStore.transaction.oncomplete = function (event) {\n                        var customerObjectStore = db.transaction(\"todo\", \"readwrite\").objectStore(\"todo\");\n                        var request = customerObjectStore.get(this.state.id);\n                        request.onerror = function (event) {\n                            // Handle errors!\n                        };\n                        request.onsuccess = function (event) {\n                            // customerData.forEach(function(customer) {\n                            var requestUpdate = customerObjectStore.put(todo);\n                            requestUpdate.onerror = function (event) {\n                                // Do something with the error\n                            };\n                            requestUpdate.onsuccess = function (event) {\n                                // Success - the data is updated!\n                            };\n                        }\n\n                    };\n                };\n\n\n            }\n            this.props.history.push('/todos')\n            // if (AuthenticationService.checkInternet()) {\n            //     TodoDataService.updateTodo(username, this.state.id, todo).then(\n            //         () => this.props.history.push('/todos')\n            //     )\n            // } else {\n            //     alert(\"You are offline\");\n            // }\n        }\n    }\n\n    componentDidMount() {\n        if (this.state.id === \"-1\") {\n            return\n        }\n        this.getIndexedDBDataById();\n        // let username = AuthenticationService.getLoggedInUserName();\n        // TodoDataService.retrieveTodo(username, this.state.id)\n        //     .then(response => this.setState({\n        //         description: response.data.description,\n        //         targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n        //     }))\n    }\n\n    getIndexedDBDataById() {\n        var db;\n        var request = indexedDB.open(\"todo-app\", 5);\n        request.onerror = function (event) {\n            console.error(\"Database error: \" + event.target.errorCode);\n            console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n        }.bind(this);\n        request.onsuccess = function (event) {\n            db = event.target.result;\n            var transaction = db.transaction(['todo'], 'readwrite');\n            var todo = transaction.objectStore('todo');\n            // var getRequest = todo.get(this.state.USER_ID);\n            var getRequest = todo.get(parseInt(this.state.USER_ID));\n            getRequest.onerror = function (event) {\n                console.log(\"Error occured while fetching data\");\n            }.bind(this);\n            getRequest.onsuccess = function (event) {\n                console.log(\"inside on success\");\n                console.log(\"---result---\" + getRequest.result);\n                this.setState({\n                    description: getRequest.result.description,\n                    targetDate: moment(getRequest.result.targetDate).format('YYYY-MM-DD')\n                });\n            }.bind(this);\n        }.bind(this);\n    }\n\n    validate(values) {\n\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a description'\n            console.log(values)\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter atleast 5 character in description'\n        }\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = 'Enter a target date'\n        }\n        return errors;\n    }\n\n    render() {\n        let { USER_ID, description, targetDate } = this.state\n        return (\n            <><br />\n                <h4>Update Todo</h4><br />\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ USER_ID, description, targetDate }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n\n                                    <button className=\"btn btn-warning\" type=\"button\" onClick={this.goBack}>Back</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </>\n        )\n    }\n}\nexport default TodoComponent","import React from \"react\"\n\nfunction ErrorComponent(){\n    return <div>An error occured.Please contact administrator</div>\n}\n\nexport default ErrorComponent","let newWorker;\nexport default function registerServiceWorker() {\n    if ('serviceWorker' in navigator) {\n        console.log(\"register service worker\");\n        navigator.serviceWorker.register(`pipelinesw.js`).then(function (reg) {\n            reg.addEventListener('updatefound', () => {\n                // A wild service worker has appeared in reg.installing!\n                newWorker = reg.installing;\n                newWorker.addEventListener('statechange', () => {\n                  console.log(\"Inside state change event\");\n                  console.log(\"current state---\"+newWorker.state);\n                  // Has network.state changed?\n                  switch (newWorker.state) {\n                    case 'installed':\n                      console.log(\"controller value---\"+navigator.serviceWorker.controller);\n                      if (navigator.serviceWorker.controller) {\n                        // new update available\n                        console.log(\"Going to call show update bar method\");\n                        // showUpdateBar();\n                        forceSWupdate();\n                        alert(\"New version update available.Please refresh the page to see the changes!!!\");\n                        window.location.reload();\n                      }\n                      // No update available\n                      break;\n                  }\n                });\n              });\n            // if (navigator.serviceWorker.controller) {\n            //     // console.log(`This page is currently controlled by: ${navigator.serviceWorker.controller}`);\n            //     alert(\"service worker update available\");\n            //     console.log(\"my service worker object hurrey---\"+navigator.serviceWorker.controller);\n            //   } else {\n            //     console.log('This page is not currently controlled by a service worker---'+reg.active);\n            //   }\n            console.log(\"It worked for me\");\n        }).catch(function (err) {\n            console.log(\"Error\", err)\n        })\n    }else{\n        console.log(\"service worker already registered\");\n    }\n}\nfunction forceSWupdate () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.getRegistrations().then(function (registrations) {\n      for (let registration of registrations) {\n        console.log(\"Going to update service worker hurrey-------\");\n        registration.update()\n      }\n    })\n  }\n}","import React, { Component } from \"react\"\nimport AuthenticationService from './AuthenticationService.js'\n\nclass ForgotPasswordComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            emailId: ''\n        }\n        this.submitClicked = this.submitClicked.bind(this)\n        this.cancelClicked = this.cancelClicked.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n    handleChange(event){\n        console.log(event.target.value);\n        this.setState({\n            [event.target.name]:event.target.value\n        })\n    }\n    submitClicked() {\n        let condition = AuthenticationService.checkInternet();\n        if (condition) {\n            if(this.state.emailId != null && this.state.emailId != ''){\n            sessionStorage.setItem('authenticateEmailId', this.state.emailId);\n            alert(\"Password changed successfully!!!\");\n            this.props.history.push('/login')\n        }else{\n            alert(\"Please enter email id\");\n        }\n            // alert(\"Going to change the password\");\n        } else {\n            alert(\"You need to be online to change the password.\");\n        }\n    }\n    cancelClicked() {\n        this.props.history.push('/login')\n    }\n    render() {\n        return (\n            <div className=\"forgotPassword\">\n                <br />Email Id <br /><input type=\"email\" name=\"emailId\" id=\"emailId\" value={this.state.emailId} onChange={this.handleChange}/><br /><br />\n                <button className=\"btn btn-success myBtn\" onClick={this.submitClicked}>Submit</button><br /><br />\n                <button className=\"btn btn-success myBtn\" onClick={this.cancelClicked}>Cancel</button>\n            </div>\n        )\n    }\n}\nexport default ForgotPasswordComponent","import React,{Component} from \"react\"\nimport {BrowserRouter as Router,Route,Switch} from \"react-router-dom\"\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport ListTodosComponent from './ListTodosComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent.jsx'\nimport HeaderComponent from './HeaderComponent.jsx'\nimport FooterComponent from './FooterComponent.jsx'\nimport LogoutComponent from './LogoutComponent.jsx'\nimport TodoComponent from './TodoComponent.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\nimport ForgotPasswordComponent from './ForgotPasswordComponent.jsx'\n\nclass TodoApp extends Component {\n    render (){\n        return(\n            <div className=\"TodoApp\">\n                <Router>\n                    <>\n                    <HeaderComponent/>\n                    <Switch>\n                    <Route path=\"/\" exact component={LoginComponent}></Route>\n                    <Route path=\"/login\" component={LoginComponent}></Route>\n                    <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}></AuthenticatedRoute>\n                    <AuthenticatedRoute path=\"/todos/:id\" component={TodoComponent}></AuthenticatedRoute>\n                    <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent}></AuthenticatedRoute>\n                    <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}></AuthenticatedRoute>\n                    <Route path=\"/forgotPassword\" component={ForgotPasswordComponent}></Route>\n                    \n                    <Route component={LoginComponent}></Route>\n                    </Switch>\n                    <FooterComponent/>\n                    </>\n                </Router>\n                {/* <WelcomeComponent/> */}\n               {/* <LoginComponent/> */}\n               \n            </div>\n        )\n    }\n}\nexport default TodoApp","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { Component } from 'react';\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\nimport './Bootstrap.css';\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       {/* <Counter/> */}\n       <TodoApp/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './serviceWorkerDev.js';\nimport AuthenticationService from './components/todo/AuthenticationService.js'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker();\nAuthenticationService.createObjectStore();\nconsole.log(\"index.js is called---------------------\");\n"],"sourceRoot":""}